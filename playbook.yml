---
- hosts: all
  become: yes
  tasks:
    - name: Install required packages
      zypper:
        name:
          - curl
          - wget
          - vim
          - docker
          - zip
          - unzip
        state: present

- hosts: k3s
  become: yes
  tasks:
    - name: Install k3s on k3s node
      shell: curl -sfL https://get.k3s.io | sh -

    - name: Get IP address of the wg0 interface
      shell: ip -4 addr show wg0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}'
      register: wg0_ip

    - name: Set node_ip fact
      set_fact:
        node_ip: "{{ wg0_ip.stdout }}"

    - name: Generate k3s configuration file
      template:
        src: templates/k3s-config.yaml.j2  # Adjust this path to your actual template location if different
        dest: /etc/rancher/k3s/config.yaml
        mode: '0644'

    - name: Reload systemd to apply k3s changes
      command: systemctl daemon-reload

    - name: Restart k3s service
      systemd:
        name: k3s
        state: restarted
        enabled: yes

    - name: Install kubectl in k3s for testing
      shell: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/arm64/kubectl"
        chmod +x kubectl
        mv kubectl /usr/local/bin/

    - name: Fetch kubeconfig directly to local machine
      fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: ./k3s-{{ inventory_hostname }}.yaml
        flat: yes
        validate_checksum: no

- hosts: nomad_server
  become: yes
  tasks:
    - name: Install Nomad on server node
      get_url:
        url: https://releases.hashicorp.com/nomad/1.8.2/nomad_1.8.2_linux_arm64.zip
        dest: /tmp/nomad.zip

    - name: Unzip and install Nomad on server
      unarchive:
        src: /tmp/nomad.zip
        dest: /usr/local/bin/
        remote_src: yes

    - name: Create Nomad configuration directory on server
      file:
        path: /etc/nomad.d
        state: directory
        mode: '0755'

    - name: Generate Nomad server configuration file from template
      template:
        src: templates/server.hcl.j2
        dest: /etc/nomad.d/nomad.hcl
        mode: '0644'

    - name: Configure and start Nomad service on server
      template:
        src: templates/nomad.service.j2
        dest: /etc/systemd/system/nomad.service

    - name: Reload systemd to apply Nomad changes on server
      command: systemctl daemon-reload

    - name: Start and enable Nomad service on server
      systemd:
        name: nomad
        state: started
        enabled: yes

    - name: Wait for Nomad server to be ready
      wait_for:
        port: 4646
        host: "{{ inventory_hostname }}"
        delay: 10
        timeout: 300

    - name: Generate the bootstrap management token
      command: /usr/local/bin/nomad acl bootstrap -json
      register: bootstrap_token

    - name: Set the bootstrap token as a fact
      set_fact:
        nomad_bootstrap_token: "{{ bootstrap_token.stdout | from_json }}"

    - name: Store the bootstrap management token locally
      delegate_to: localhost
      copy:
        content: "{{ bootstrap_token.stdout }}"
        dest: ./nomad_bootstrap_token.json
      become: no  # Make sure sudo is not used


- hosts: nomad_clients
  become: yes
  tasks:
    - name: Install Nomad on server node
      get_url:
        url: https://releases.hashicorp.com/nomad/1.8.2/nomad_1.8.2_linux_arm64.zip
        dest: /tmp/nomad.zip

    - name: Unzip and install Nomad on server
      unarchive:
        src: /tmp/nomad.zip
        dest: /usr/local/bin/
        remote_src: yes

    - name: Create Nomad configuration directory on clients
      file:
        path: /etc/nomad.d
        state: directory
        mode: '0755'

    - name: Generate Nomad client configuration file from template
      template:
        src: templates/nomad.hcl.j2
        dest: /etc/nomad.d/nomad.hcl
        mode: '0644'

    - name: Generate and configure Nomad service file
      template:
        src: templates/nomad.service.j2
        dest: /etc/systemd/system/nomad.service
      vars:
        bootstrap_token: "{{ hostvars[groups['nomad_server'][0]].nomad_bootstrap_token.SecretID }}"

    - name: Reload systemd to apply Nomad changes on clients
      command: systemctl daemon-reload

    - name: Start and enable Nomad service on clients
      systemd:
        name: nomad
        state: started
        enabled: yes

